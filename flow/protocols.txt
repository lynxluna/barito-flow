Log Producer and Consumer In-Wire Binary Protocol
-------------------------------------------------

Revision
--------

> Ver 0.1 DRAFT - July 31, 2018
> Ver 0.2 DRAFT - Aug 1, 2018


As log mostly text, the protocol is very simple. The protocol is delivered using UDP transport to reduce latency.
Log is usually large, therefore we have compression built-in. Nature of UDP is unreliable, so we'll use KCP to mitigate
some of the unreliability.

0                       4           8
+-----------------------+-----------+
| 'BLRQ'                | ulen      |
+-----------------------------------+ 8
| TIMESTAMP (64-bit)                |
+-----------------------------------+ 16
|                                   |
+                                   + 24
|  SIGNATURE                        |
+                                   + 32 
|                                   |
+                                   + 40
|                                   |
+-----------------------------------+ 48
|                                   |
|     LOG DATA (variable length)    |
|                                   |

The length sent is the byte length not the string length as
they can differ. See: https://ykode.id/under-the-bonnet-representing-characters-and-strings-ff7cec26ee3c .

- `BLRQ` is the packet header, "Barito Log ReQuest".
- `ulen` is the byte length of the data.
- `SIGNATURE` is 256-bit long, enough for SHA-256. Signature is implementation-defined.
- `LOG DATA` is the log text and whatever you want to attach. Started at offset 48.

## Compression

As log usually includes a lot of text, we'll need some form of
compression to reduce network bandwidth. Compression is done in
protocol level using Google
Snappy. See: https://en.wikipedia.org/wiki/Snappy_(compression).

## Optimisation

The protocol/connection is multiplexed together using
smux https://github.com/xtaci/smux. This includes token bucket for
throttling so we don't DDoS ourselves.

